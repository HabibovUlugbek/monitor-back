import fontkit from '@pdf-lib/fontkit'
import { PDFDocument, rgb } from 'pdf-lib'
import fs from 'fs/promises'
import path from 'path'
export const generatePdf = async (loanId: string, data: any): Promise<Buffer> => {
  try {
    // Load custom font
    const fontPath = path.resolve(__dirname, './OpenSans-Regular.ttf')
    const fontBuffer = await fs.readFile(fontPath)
    const fontBytes = new Uint8Array(fontBuffer)

    // Create a new PDF document
    const pdfDoc = await PDFDocument.create()
    pdfDoc.registerFontkit(fontkit)
    const customFont = await pdfDoc.embedFont(fontBytes)

    // Add a page
    const page = pdfDoc.addPage([595, 842]) // A4 size
    const { width, height } = page.getSize()

    // Helper function for adding text
    const drawText = (text: string, x: number, y: number, bold = false) => {
      page.drawText(text, {
        x,
        y,
        size: 12, // All text size is 12
        font: customFont,
        color: rgb(0, 0, 0),
      })
    }

    // Helper function to draw bold text
    const drawBoldText = (text: string, x: number, y: number) => {
      page.drawText(text, {
        x,
        y,
        size: 12,
        font: customFont,
        color: rgb(0, 0, 0),
      })
    }

    // Helper function to draw a table cell
    const drawCell = (x: number, y: number, w: number, h: number) => {
      page.drawRectangle({
        x,
        y,
        width: w,
        height: h,
        borderColor: rgb(0, 0, 0),
        borderWidth: 1,
      })
    }

    // üìå **Header Section**
    drawBoldText('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Ññ2', 400, height - 50)
    drawBoldText('–∫ ¬´–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –ø–æ—Ä—è–¥–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –≤–∑—ã—Å–∫–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤', 190, height - 70)
    drawBoldText('–≤ –ê–û ¬´–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –≤–Ω–µ—à–Ω–µ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', 180, height - 85)
    drawBoldText('–†–µ—Å–ø—É–±–ª–∏–∫–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω¬ª', 400, height - 100)
    drawBoldText('(—Ä–µ–≥. ‚Ññ________–æ—Ç _________)', 400, height - 120)

    // üìå **Title Section**
    drawBoldText('–ê–∫—Ç –ø—Ä–∏–µ–º–∞-–ø–µ—Ä–µ–¥–∞—á–∏ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –¥–µ–ª–∞*', 170, height - 160)

    // üìå **Approval Section**
    drawBoldText('¬´–£–¢–í–ï–†–ñ–î–ê–Æ¬ª', 400, height - 190)
    drawText('–£–ø—Ä–∞–≤–ª—è—é—â–∏–π –¶–ë–£/–û–ë–£', 400, height - 210)
    drawText('¬´___¬ª _________20__–≥', 400, height - 230)

    // üìå **Loan Details**
    drawText('–ü–æ –∫—Ä–µ–¥–∏—Ç—É –¶–ë–£ –Ø–∫–∫–∞—Ä–∞—Å–∞–π –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä ‚Ññ 01 –æ—Ç 01.01.2025', 50, height - 270)
    drawText('–ë–∞—Ä–∞–∫–∞ –ú–ß–ñ (–∑–∞—ë–º—â–∏–∫) –Ω–∞ —Å—É–º–º—É 1 000 000 000 —Å—É–º', 50, height - 285)
    drawText('(–ø—Ä–∏ –ø—Ä–∏–µ–º-–ø–µ—Ä–µ–¥–∞—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—É–º–º—ã –æ—Å—Ç–∞—Ç–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞,', 50, height - 300)
    drawText('–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–≥, –ø—Ä–æ—Ü–µ–Ω—Ç—ã)', 50, height - 315)

    // üìå **Table**
    const tableStartX = 50
    const tableStartY = height - 350
    const rowHeight = 30
    const colWidths = [40, 280, 100, 100]

    // **Table Headers (Bold)**
    const headers = ['‚Ññ', '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', '–ö–æ–ª-–≤–æ –ª–∏—Å—Ç–æ–≤*', '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ']

    // Draw header row with bold text
    let currentX = tableStartX
    headers.forEach((header, index) => {
      drawCell(currentX, tableStartY, colWidths[index], rowHeight)
      drawBoldText(header, currentX + 5, tableStartY + 10)
      currentX += colWidths[index]
    })

    // Draw empty table rows
    let currentY = tableStartY - rowHeight
    data.forEach((doc: { name: string; pages: number; comment: string }, index: number) => {
      currentX = tableStartX
      const row = [index + 1, doc.name, doc.pages, doc.comment]
      row.forEach((cell, idx) => {
        drawCell(currentX, currentY, colWidths[idx], rowHeight)
        drawText(cell.toString(), currentX + 5, currentY + 7)
        currentX += colWidths[idx]
      })
      currentY -= rowHeight
    })

    // üìå **Footer**
    drawText('–í—Å–µ–≥–æ –ª–∏—Å—Ç–æ–≤: ______', 50, height - 620)
    drawText('* –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç–Ω—ã–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ', 50, height - 640)
    drawText('–º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ PDF. –ö–∞–∂–¥—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º ', 50, height - 655)
    drawText('—Ñ–∞–π–ª–æ–º. –ü—Ä–∏ —ç—Ç–æ–º —Ñ–∞–π–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∏–º—è ‚Äì –≥–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –º–µ—Å—è—Ü,  ', 50, height - 670)
    drawText('—á–∏—Å–ª–æ –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ_–Ω–æ–º–µ—Ä.', 50, height - 685)

    drawText('–°–¥–∞–ª(–∞) _______________________', 120, height - 735)
    drawText('–§.–ò.–û. –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –¥–∞—Ç–∞ –ß–ß –ú–ú –ì–ì, –ø–æ–¥–ø–∏—Å—å', 70, height - 750)
    drawText('–ü—Ä–∏–Ω—è–ª(–∞) ______________________', 120, height - 770)
    drawText('–§.–ò.–û. –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –¥–∞—Ç–∞ –ß–ß –ú–ú –ì–ì, –ø–æ–¥–ø–∏—Å—å', 70, height - 785)

    // Save the PDF
    const pdfBytes = await pdfDoc.save()
    await fs.writeFile(`./uploads/report-${loanId}.pdf`, pdfBytes)
    console.log('‚úÖ PDF saved as formatted-russian-document.pdf')

    return Buffer.from(pdfBytes)
  } catch (error) {
    console.error('‚ùå Error:', error)
  }
}
;(async () => {
  try {
    // const pdfBuffer = await generatePdf({})
    console.log('‚úÖ PDF Generated Successfully!')
  } catch (error) {
    console.error('‚ùå Error generating PDF:', error)
  }
})()
